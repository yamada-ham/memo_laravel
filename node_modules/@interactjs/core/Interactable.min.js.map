{
	"version": 3,
	"sources": [
		"Interactable.ts"
	],
	"names": [
		"arr",
		"browser",
		"clone",
		"getElementRect",
		"matchesUpTo",
		"nodeContains",
		"trySelector",
		"events",
		"extend",
		"is",
		"normalizeListeners",
		"getWindow",
		"Eventable",
		"isNonNativeEvent",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"constructor",
		"target",
		"options",
		"defaultContext",
		"this",
		"_actions",
		"_context",
		"_win",
		"_doc",
		"context",
		"document",
		"set",
		"setOnEvents",
		"actionName",
		"phases",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"array",
		"object",
		"off",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"rectChecker",
		"checker",
		"_backCompatOption",
		"newValue",
		"action",
		"map",
		"origin",
		"deltaSource",
		"inContext",
		"ownerDocument",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"fire",
		"iEvent",
		"_onOff",
		"method",
		"typeArg",
		"listenerArg",
		"addRemove",
		"type",
		"wheelEvent",
		"listener",
		"types",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"remove",
		"delegatedEvents",
		"delegated",
		"selectors",
		"contexts",
		"splice",
		"delegateListener",
		"delegateUseCapture"
	],
	"mappings": "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",
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport events from '@interactjs/utils/events'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\nimport Eventable from './Eventable'\nimport { ActionDefaults, Defaults, Options } from './defaultOptions'\nimport { Actions, isNonNativeEvent } from './scope'\n\ntype IgnoreValue = string | Interact.Element | boolean\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  protected get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Actions\n  readonly target: Interact.Target\n  readonly events = new Eventable()\n  readonly _context: Interact.Context\n  readonly _win: Window\n  readonly _doc: Document\n\n  /** */\n  constructor (target: Interact.Target, options: any, defaultContext: Document | Interact.Element) {\n    this._actions = options.actions\n    this.target   = target\n    this._context = options.context || defaultContext\n    this._win     = getWindow(trySelector(target) ? this._context : target)\n    this._doc     = this._win.document\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: Interact.ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) { this.on(`${actionName}start`, phases.onstart) }\n    if (is.func(phases.onmove)) { this.on(`${actionName}move`, phases.onmove) }\n    if (is.func(phases.onend)) { this.on(`${actionName}end`, phases.onend) }\n    if (is.func(phases.oninertiastart)) { this.on(`${actionName}inertiastart`, phases.oninertiastart) }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: Interact.ActionName, prev: Interact.Listeners, cur: Interact.Listeners) {\n    if (is.array(prev) || is.object(prev)) {\n      this.off(actionName, prev)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this.on(actionName, cur)\n    }\n  }\n\n  setPerAction (actionName: Interact.ActionName, options: Interact.OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof Interact.PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Interact.Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array<any>(optionValue)) {\n        (actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        (actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || {} as any,\n          clone(optionValue))\n\n        // set anabled field to true if it exists in the defaults\n        if (is.object(defaults.perAction[optionName]) && 'enabled' in (defaults.perAction[optionName] as any)) {\n          (actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        (actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        (actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {object} The object's bounding rectangle.\n   */\n  getRect (element: Interact.Element) {\n    element = element || (is.element(this.target)\n      ? this.target\n      : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker (checker: (element: Interact.Element) => any) {\n    if (is.func(checker)) {\n      this.getRect = checker\n\n      return this\n    }\n\n    if (checker === null) {\n      delete this.getRect\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Interact.Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      (this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        (this.options[action][optionName] as any) = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource (newValue?: string) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return (this._context === element.ownerDocument ||\n            nodeContains(this._context, element))\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Interact.EventTarget,\n  ) {\n    return (!this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n            this.testAllow(options.allowFrom, targetNode, eventTarget))\n  }\n\n  testAllow (\n    this: Interactable,\n    allowFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!allowFrom) { return true }\n\n    if (!is.element(element)) { return false }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    }\n    else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (\n    this: Interactable,\n    ignoreFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!ignoreFrom || !is.element(element)) { return false }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    }\n    else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire (iEvent: object) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (method: 'on' | 'off', typeArg: Interact.EventTypes, listenerArg?: Interact.ListenersArg | null, options?: any) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const addRemove = method === 'on' ? 'add' : 'remove'\n    const listeners = normalizeListeners(typeArg, listenerArg)\n\n    for (let type in listeners) {\n      if (type === 'wheel') { type = browser.wheelEvent }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          events[`${addRemove}Delegate` as 'addDelegate' | 'removeDelegate'](this.target, this._context, type, listener, options)\n        }\n        // remove listener from this Interactable's element\n        else {\n          (events[addRemove] as typeof events.remove)(this.target, type, listener, options)\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('on', types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('off', types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: Interact.OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    (this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as Interact.ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n\n      this[methodName](options[actionName])\n    }\n\n    for (const setting in options) {\n      if (is.func(this[setting])) {\n        this[setting](options[setting])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   *\n   * @return {interact}\n   */\n  unset () {\n    events.remove(this.target as Node, 'all')\n\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in events.delegatedEvents) {\n        const delegated = events.delegatedEvents[type]\n\n        if (delegated.selectors[0] === this.target &&\n            delegated.contexts[0] === this._context) {\n          delegated.selectors.splice(0, 1)\n          delegated.contexts.splice(0, 1)\n          delegated.listeners.splice(0, 1)\n        }\n\n        events.remove(this._context, type, events.delegateListener)\n        events.remove(this._context, type, events.delegateUseCapture, true)\n      }\n    }\n    else {\n      events.remove(this.target as Node, 'all')\n    }\n  }\n}\n\nexport default Interactable\n"
	]
}