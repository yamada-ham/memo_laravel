{
	"version": 3,
	"sources": [
		"Interactable.ts"
	],
	"names": [
		"arr",
		"browser",
		"clone",
		"getElementRect",
		"matchesUpTo",
		"nodeContains",
		"trySelector",
		"events",
		"extend",
		"is",
		"normalizeListeners",
		"getWindow",
		"Eventable",
		"isNonNativeEvent",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"constructor",
		"target",
		"options",
		"defaultContext",
		"_actions",
		"_context",
		"_win",
		"_doc",
		"context",
		"document",
		"set",
		"setOnEvents",
		"actionName",
		"phases",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"array",
		"object",
		"off",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"rectChecker",
		"checker",
		"_backCompatOption",
		"newValue",
		"action",
		"map",
		"origin",
		"deltaSource",
		"inContext",
		"ownerDocument",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"fire",
		"iEvent",
		"_onOff",
		"method",
		"typeArg",
		"listenerArg",
		"addRemove",
		"type",
		"wheelEvent",
		"listener",
		"types",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"remove",
		"delegatedEvents",
		"delegated",
		"selectors",
		"contexts",
		"splice",
		"delegateListener",
		"delegateUseCapture"
	],
	"mappings": "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",
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport events from '@interactjs/utils/events'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\nimport Eventable from './Eventable'\nimport { ActionDefaults, Defaults, Options } from './defaultOptions'\nimport { Actions, isNonNativeEvent } from './scope'\n\ntype IgnoreValue = string | Interact.Element | boolean\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  protected get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Actions\n  readonly target: Interact.Target\n  readonly events = new Eventable()\n  readonly _context: Interact.Context\n  readonly _win: Window\n  readonly _doc: Document\n\n  /** */\n  constructor (target: Interact.Target, options: any, defaultContext: Document | Interact.Element) {\n    this._actions = options.actions\n    this.target   = target\n    this._context = options.context || defaultContext\n    this._win     = getWindow(trySelector(target) ? this._context : target)\n    this._doc     = this._win.document\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: Interact.ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) { this.on(`${actionName}start`, phases.onstart) }\n    if (is.func(phases.onmove)) { this.on(`${actionName}move`, phases.onmove) }\n    if (is.func(phases.onend)) { this.on(`${actionName}end`, phases.onend) }\n    if (is.func(phases.oninertiastart)) { this.on(`${actionName}inertiastart`, phases.oninertiastart) }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: Interact.ActionName, prev: Interact.Listeners, cur: Interact.Listeners) {\n    if (is.array(prev) || is.object(prev)) {\n      this.off(actionName, prev)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this.on(actionName, cur)\n    }\n  }\n\n  setPerAction (actionName: Interact.ActionName, options: Interact.OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof Interact.PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Interact.Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array<any>(optionValue)) {\n        (actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        (actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || {} as any,\n          clone(optionValue))\n\n        // set anabled field to true if it exists in the defaults\n        if (is.object(defaults.perAction[optionName]) && 'enabled' in (defaults.perAction[optionName] as any)) {\n          (actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        (actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        (actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {object} The object's bounding rectangle.\n   */\n  getRect (element: Interact.Element) {\n    element = element || (is.element(this.target)\n      ? this.target\n      : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker (checker: (element: Interact.Element) => any) {\n    if (is.func(checker)) {\n      this.getRect = checker\n\n      return this\n    }\n\n    if (checker === null) {\n      delete this.getRect\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Interact.Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      (this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        (this.options[action][optionName] as any) = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource (newValue?: string) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return (this._context === element.ownerDocument ||\n            nodeContains(this._context, element))\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Interact.EventTarget,\n  ) {\n    return (!this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n            this.testAllow(options.allowFrom, targetNode, eventTarget))\n  }\n\n  testAllow (\n    this: Interactable,\n    allowFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!allowFrom) { return true }\n\n    if (!is.element(element)) { return false }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    }\n    else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (\n    this: Interactable,\n    ignoreFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!ignoreFrom || !is.element(element)) { return false }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    }\n    else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire (iEvent: object) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (method: 'on' | 'off', typeArg: Interact.EventTypes, listenerArg?: Interact.ListenersArg | null, options?: any) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const addRemove = method === 'on' ? 'add' : 'remove'\n    const listeners = normalizeListeners(typeArg, listenerArg)\n\n    for (let type in listeners) {\n      if (type === 'wheel') { type = browser.wheelEvent }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          events[`${addRemove}Delegate` as 'addDelegate' | 'removeDelegate'](this.target, this._context, type, listener, options)\n        }\n        // remove listener from this Interactable's element\n        else {\n          (events[addRemove] as typeof events.remove)(this.target, type, listener, options)\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('on', types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('off', types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: Interact.OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    (this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as Interact.ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n\n      this[methodName](options[actionName])\n    }\n\n    for (const setting in options) {\n      if (is.func(this[setting])) {\n        this[setting](options[setting])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   *\n   * @return {interact}\n   */\n  unset () {\n    events.remove(this.target as Node, 'all')\n\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in events.delegatedEvents) {\n        const delegated = events.delegatedEvents[type]\n\n        if (delegated.selectors[0] === this.target &&\n            delegated.contexts[0] === this._context) {\n          delegated.selectors.splice(0, 1)\n          delegated.contexts.splice(0, 1)\n          delegated.listeners.splice(0, 1)\n        }\n\n        events.remove(this._context, type, events.delegateListener)\n        events.remove(this._context, type, events.delegateUseCapture, true)\n      }\n    }\n    else {\n      events.remove(this.target as Node, 'all')\n    }\n  }\n}\n\nexport default Interactable\n"
	]
}