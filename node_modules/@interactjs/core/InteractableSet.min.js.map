{
	"version": 3,
	"sources": [
		"InteractableSet.ts"
	],
	"names": [
		"arr",
		"domUtils",
		"extend",
		"is",
		"InteractableSet",
		"constructor",
		"scope",
		"this",
		"list",
		"selectorMap",
		"addListeners",
		"interactable:unset",
		"interactable",
		"target",
		"_context",
		"context",
		"targetMappings",
		"string",
		"id",
		"targetIndex",
		"findIndex",
		"m",
		"splice",
		"new",
		"options",
		"actions",
		"Interactable",
		"document",
		"mappingInfo",
		"addDocument",
		"_doc",
		"push",
		"Object",
		"defineProperty",
		"value",
		"configurable",
		"fire",
		"win",
		"_win",
		"get",
		"isSelector",
		"found",
		"find",
		"inContext",
		"forEachMatch",
		"node",
		"callback",
		"ret",
		"element",
		"matchesSelector",
		"undefined"
	],
	"mappings": "UAAYA,MAAS,gCACTC,MAAc,kCACnBC,MAAY,mCACPC,MAAQ,oCAkBL,MAAMC,EAQnBC,YAAuBC,GAAuBC,KAAvBD,MAAAA,EAAuBC,KAN9CC,KAAgC,GAMcD,KAJ9CE,YAEI,GAGFH,EAAMI,aAAa,CACjBC,qBAAsB,EAAGC,aAAAA,MACvB,MAAMC,OAAEA,EAAQC,SAAUC,GAAYH,EAChCI,EAA0Cb,EAAGc,OAAOJ,GACtDN,KAAKE,YAAYI,GAChBA,EAAeN,KAAKD,MAAMY,IAEzBC,EAAcH,EAAeI,UAAUC,GAAKA,EAAEN,UAAYA,GAC5DC,EAAeG,KAEjBH,EAAeG,GAAaJ,QAAU,KACtCC,EAAeG,GAAaP,aAAe,MAE7CI,EAAeM,OAAOH,EAAa,MAKzCI,IAAKV,EAAyBW,GAC5BA,EAAUtB,EAAOsB,GAAW,GAAI,CAC9BC,QAASlB,KAAKD,MAAMmB,UAEtB,MAAMb,EAAe,IAAIL,KAAKD,MAAMoB,aAAab,EAAQW,EAASjB,KAAKD,MAAMqB,UACvEC,EAAc,CAAEb,QAASH,EAAaE,SAAUF,aAAAA,GA0BtD,OAxBAL,KAAKD,MAAMuB,YAAYjB,EAAakB,MACpCvB,KAAKC,KAAKuB,KAAKnB,GAEXT,EAAGc,OAAOJ,IACPN,KAAKE,YAAYI,KAAWN,KAAKE,YAAYI,GAAU,IAC5DN,KAAKE,YAAYI,GAAQkB,KAAKH,KAEvBhB,EAAaC,OAAeN,KAAKD,MAAMY,KAC5Cc,OAAOC,eAAepB,EAAQN,KAAKD,MAAMY,GAAI,CAC3CgB,MAAO,GACPC,cAAc,IAIjBtB,EAAeN,KAAKD,MAAMY,IAAIa,KAAKH,IAGtCrB,KAAKD,MAAM8B,KAAK,mBAAoB,CAClCvB,OAAAA,EACAW,QAAAA,EACAZ,aAAAA,EACAyB,IAAK9B,KAAKD,MAAMgC,OAGX1B,EAGT2B,IAAK1B,EAAyBW,GAC5B,MAAMT,EAAWS,GAAWA,EAAQT,SAAYR,KAAKD,MAAMqB,SACrDa,EAAarC,EAAGc,OAAOJ,GACvBG,EAA0CwB,EAC5CjC,KAAKE,YAAYI,GAChBA,EAAeN,KAAKD,MAAMY,IAE/B,IAAKF,EAAkB,OAAO,KAE9B,MAAMyB,EAAQzC,EAAI0C,KAChB1B,EACAK,GAAKA,EAAEN,UAAYA,IAChByB,GAAcnB,EAAET,aAAa+B,UAAU9B,KAE5C,OAAO4B,GAASA,EAAM7B,aAGxBgC,aAAiBC,EAAYC,GAC3B,IAAK,MAAMlC,KAAgBL,KAAKC,KAAM,CACpC,IAAIuC,EAYJ,IAVK5C,EAAGc,OAAOL,EAAaC,QAEvBV,EAAG6C,QAAQH,IAAS5C,EAASgD,gBAAgBJ,EAAMjC,EAAaC,QAEjEgC,IAASjC,EAAaC,SAEvBD,EAAa+B,UAAUE,KACxBE,EAAMD,EAASlC,SAGLsC,IAARH,EACF,OAAOA",
	"sourcesContent": [
		"import * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interact.Interactable\n      target: Interact.Target\n      options: Interact.OptionsArg\n      win: Window\n    }\n  }\n}\n\ninterface InteractableScopeProp {\n  context: Document | Interact.Element\n  interactable: Interact.Interactable\n}\n\nexport default class InteractableSet {\n  // all set interactables\n  list: Interact.Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: InteractableScopeProp[]\n  } = {}\n\n  constructor (protected scope: Interact.Scope) {\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target, _context: context } = interactable\n        const targetMappings: InteractableScopeProp[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = targetMappings.findIndex(m => m.context === context)\n        if (targetMappings[targetIndex]) {\n        // Destroying mappingInfo's context and interactable\n          targetMappings[targetIndex].context = null\n          targetMappings[targetIndex].interactable = null\n        }\n        targetMappings.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new (target: Interact.Target, options?: any): Interact.Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document)\n    const mappingInfo = { context: interactable._context, interactable }\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) { this.selectorMap[target] = [] }\n      this.selectorMap[target].push(mappingInfo)\n    } else {\n      if (!((interactable.target as any)[this.scope.id])) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      (target as any)[this.scope.id].push(mappingInfo)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  get (target: Interact.Target, options?: Interact.Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const targetMappings: InteractableScopeProp[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!targetMappings) { return null }\n\n    const found = arr.find(\n      targetMappings,\n      m => m.context === context &&\n        (isSelector || m.interactable.inContext(target as any)))\n\n    return found && found.interactable\n  }\n\n  forEachMatch<T> (node: Node, callback: (interactable: Interact.Interactable) => T): T | void {\n    for (const interactable of this.list) {\n      let ret\n\n      if ((is.string(interactable.target)\n      // target is a selector and the element matches\n        ? (is.element(node) && domUtils.matchesSelector(node, interactable.target))\n        // target is the element\n        : node === interactable.target) &&\n        // the element is in context\n        (interactable.inContext(node))) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n"
	]
}